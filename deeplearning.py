# -*- coding: utf-8 -*-
"""DeepLearning.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1DK9HGJwT4ax6NsA2cUVr1Hlz_OsI2T0l

# Laboratorio 3

link para compartir: https://drive.google.com/drive/folders/18C7EzsX9LetIhz9WuUV4Bd6yAeeaubMz?usp=sharing
"""

import pandas as pd
import numpy as np
import tensorflow as tf
from google.colab import files
import matplotlib.pyplot as plt

# Parametros
LEARNING_RATE = 0.001
TRAINING_EPOCHS = 3000
BATCH_SIZE = 100
DISPLAY_STEP = 10
DROPOUT_CONV = 0.8
DROPOUT_HIDDEN = 0.6
VALIDATION_SIZE = 2000      # Set to 0 to train on all available data

!pip install -U -q PyDrive ## you will have install for every colab session
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from google.colab import auth
from oauth2client.client import GoogleCredentials
# 1. Authenticate and create the PyDrive client.
auth.authenticate_user()
gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()
drive = GoogleDrive(gauth)

file_list = drive.ListFile({'q': "'18C7EzsX9LetIhz9WuUV4Bd6yAeeaubMz' in parents and trashed=false"}).GetList()
for file1 in file_list:
  print('title: %s, id: %s' % (file1['title'], file1['id']))

test = drive.CreateFile({'id': '1vdBec1A_SCu4v0r_SRqd5oqPVAkUYYyC'})
test.GetContentFile('test.csv')
sample = drive.CreateFile({'id': '1Zq7yOsJeedmfqmK2srbJU0rMvFkQEK_Q'})
sample.GetContentFile('sample.csv')
train = drive.CreateFile({'id': '1PNwiiiKC8ziiCnlOYE6EPMNWC0BDdkuH'})
train.GetContentFile('train.csv')

"""## Análisis Exploratorio

Lo que sabemos: <br>
*  Cada imagen tiene 28 píxeles de altura y 28 píxeles de ancho
*  784 píxeles en total
*  Valor entre 0 y 255 escala gris (0 es el mas blanco)
* La imagen son letras
* train.csv tiene 785 porque tiene una columna extra "etiqueta" con el digito del dibujo

---
Cargamos los datos
"""

test = pd.read_csv('test.csv')
sample = pd.read_csv('sample.csv')
train = pd.read_csv('train.csv')

"""---
Miramos que tipo son los valores de pixeles
"""

test.dtypes.head()

test.shape[1]

"""Encontramos que tiene 784 variables que es exactmanete como nos direon la informacion y que estan trabajando con enteros"""

train.dtypes.head()

train.shape[1]

train[['label']].describe()

print ("Sesgado :", (train[['label']].skew()))
plt.hist(train[['label']], color='blue')
plt.show()

"""Aqui encontramos que hay una columna extra pero se llama *label*<br>Label tiene el valor de 0 a 9 representando el dibujo. El promedio siendo 4.456<br>Para no confundirnos vamos a **separar** el label del dataset

## Deep Learning
"""

import numpy as np
import pandas as pd

import tensorflow as tf

# Parameters
LEARNING_RATE = 0.001
TRAINING_EPOCHS = 3000
BATCH_SIZE = 100
DISPLAY_STEP = 10
DROPOUT_CONV = 0.8
DROPOUT_HIDDEN = 0.6
VALIDATION_SIZE = 2000      # Set to 0 to train on all available data

data = pd.read_csv('train.csv')

label = train[['label']].values.ravel()

label

"""Lo volvimos un array para poder manipularlo con tenserflow<br>
Tambien sacamos los diferentes variedades de labels que tienen
"""

NumDelabels = np.unique(label).shape[0]

NumDelabels

"""Ahora vamos a separar los dibujos y ponerlos en un array"""

dibujo = train.iloc[:,1:].values
dibujo = dibujo.astype(np.float)

dibujo

"""Por simplisidad lo queremos volver en un arreglo pero con la etiqueta como etiqueta

```
0: [0,0,0,0,0,0,0,...,0]
1: [0,0,0,0,0,0,0,...,0]
2: [0,0,0,0,0,0,0,...,0]
3: [0,0,0,0,0,0,0,...,0]
4: [0,0,0,0,0,0,0,...,0]
5: [0,0,0,0,0,0,0,...,0]
```
"""

def dense_to_one_hot(labels_dense, num_classes):
    num_labels = labels_dense.shape[0]
    index_offset = np.arange(num_labels) * num_classes
    labels_one_hot = np.zeros((num_labels, num_classes))
    labels_one_hot.flat[index_offset + labels_dense.ravel()] = 1
    return labels_one_hot

labels = dense_to_one_hot(label, NumDelabels)
labels = labels.astype(np.uint8)

"""Normalizamos los datos de 0 - 255 ahora va a ser de 0.0 a 1.0"""

dibujo = np.multiply(images, 1.0 / 255.0)
NumDedibujo = dibujo.shape[1]
dibujoRow = dibujoCol = np.ceil(np.sqrt(NumDedibujo)).astype(np.uint8)

"""---
Analizando **sample**:
"""

print('(filas, columnas)')
sample.shape

sample.dtypes

"""Tiene dos variables y 28000 registros. Los dos son enteros"""

sample.describe()

"""Label siempre va a tener el valor de 0 ya que el valor máximo y mínimo encontrado es 0. <br>
Image Id parece ser el id de la imagen que es un contador que empieza en 1 y termina en 28 mil.

## Otro Algoritmo

Algoritmo escogido en: http://yann.lecun.com/exdb/mnist/

Graficas para usar despues

```
x=seasonSummary['2P']
y=seasonSummary['eff']
plt.scatter(x, y)
plt.xlabel('2P')
plt.ylabel('eff')
z = np.polyfit(x, y, 1)
p = np.poly1d(z)
plt.plot(x,p(x),"r--")
plt.show()


print ("Sesgado :", train.skew())
plt.hist(np.log(train), color='blue')
plt.show()
```
"""